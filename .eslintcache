[{"/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/App.js":"1","/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/components/RegisterPage/RegisterPage.js":"2","/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/redux/reducer/user_reducer.js":"3","/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/redux/actions/chatRoom_action.js":"4","/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/index.js":"5","/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/redux/actions/types.js":"6","/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/components/ChatPage/MainPanel/MainPanel.js":"7","/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/redux/reducer/chatRoom_reducer.js":"8","/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/components/ChatPage/SidePanel/ChatRooms.js":"9","/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/components/ChatPage/ChatPage.js":"10"},{"size":1241,"mtime":1607052181873,"results":"11","hashOfConfig":"12"},{"size":4016,"mtime":1607051927031,"results":"13","hashOfConfig":"12"},{"size":712,"mtime":1607056900767,"results":"14","hashOfConfig":"12"},{"size":194,"mtime":1607070466914,"results":"15","hashOfConfig":"12"},{"size":1398,"mtime":1607071781890,"results":"16","hashOfConfig":"12"},{"size":206,"mtime":1607070511415,"results":"17","hashOfConfig":"12"},{"size":661,"mtime":1607010966783,"results":"18","hashOfConfig":"12"},{"size":406,"mtime":1607070635760,"results":"19","hashOfConfig":"12"},{"size":5083,"mtime":1607516487772,"results":"20","hashOfConfig":"12"},{"size":498,"mtime":1607051952213,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"1t936sf",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/App.js",["44"],"import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Switch, Route, useHistory } from 'react-router-dom';\n\nimport { setUser, clearUser } from './redux/actions/user_action';\n\nimport ChatPage from './components/ChatPage/ChatPage';\nimport LoginPage from './components/LoginPage/LoginPage';\nimport RegisterPage from './components/RegisterPage/RegisterPage';\nimport firebase from './firebase';\n\nfunction App() {\n  let history = useHistory();\n  const dispatch = useDispatch();\n  const isLoading = useSelector((state) => state.user.isLoading);\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        // Login success\n        history.push('/');\n        dispatch(setUser(user));\n      } else {\n        // Login fail\n        history.push('/login');\n        dispatch(clearUser());\n      }\n    });\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <div>loading ...</div>\n      ) : (\n        <Switch>\n          <Route exact path='/' component={ChatPage} />\n          <Route exact path='/login' component={LoginPage} />\n          <Route exact path='/register' component={RegisterPage} />\n        </Switch>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/components/RegisterPage/RegisterPage.js",[],"/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/redux/reducer/user_reducer.js",[],"/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/redux/actions/chatRoom_action.js",[],"/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/index.js",[],"/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/redux/actions/types.js",[],"/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/components/ChatPage/MainPanel/MainPanel.js",["45"],"/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/redux/reducer/chatRoom_reducer.js",[],"/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/components/ChatPage/SidePanel/ChatRooms.js",["46","47","48","49"],"import React, { useState, useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport {\n  Flex,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport { FaRegSmileWink, FaPlus } from 'react-icons/fa';\nimport { setCurrentChatRoom } from '../../../redux/actions/chatRoom_action';\nimport firebase from '../../../firebase';\n\n/**\n * Styled Component\n */\nconst ChatRoomsList = styled.ul`\n  list-style-type: none;\n  padding: 0;\n`;\n\n/**\n * Functional Component\n */\nfunction ChatRooms() {\n  const dispatch = useDispatch();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [roomRef, setRoomRef] = useState(firebase.database().ref('chatRooms'));\n  const [activeChatRoomId, setActiveChatRoomId] = useState('');\n\n  /**\n   * Handler for JSX\n   */\n  const [roomName, setRoomName] = useState('');\n  const [roomDesc, setRoomDesc] = useState('');\n  const user = useSelector((state) => state.user.currentUser);\n\n  const isFormValid = (name, desc) => {\n    return name && desc;\n  };\n  const addChatRoom = async () => {\n    const key = roomRef.push().key;\n    const newChatRoom = {\n      id: key,\n      name: roomName,\n      description: roomDesc,\n      createdBy: {\n        name: user.displayName,\n        image: user.photoURL,\n      },\n    };\n\n    try {\n      await roomRef.child(key).update(newChatRoom);\n      setRoomName('');\n      setRoomDesc('');\n      onClose();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (isFormValid(roomName, roomDesc)) addChatRoom();\n  };\n\n  /**\n   * 1. Add chatting rooms when component mounted\n   */\n  const [chatRooms, setChatRooms] = useState([]);\n\n  const getChatRooms = () => {\n    roomRef.on('value', (dataSnapshot) => {\n      const test = dataSnapshot.val();\n      setChatRooms([...Object.values(test)]);\n    });\n  };\n  const addChatRoomsListeners = () => {\n    const chatRoomsArray = [];\n    roomRef.on('child_added', (dataSnapshot) => {\n      chatRoomsArray.push(dataSnapshot.val());\n      setChatRooms(chatRoomsArray);\n    });\n  };\n  const changeChatRoom = (room) => {\n    dispatch(setCurrentChatRoom(room));\n    setActiveChatRoomId(room.id);\n  };\n  const renderChatRooms = useCallback(\n    (chatRooms) => {\n      if (chatRooms.length > 0) {\n        return chatRooms.map((room) => {\n          return (\n            <li\n              key={room.id}\n              onClick={() => changeChatRoom(room)}\n              style={{\n                cursor: 'pointer',\n                backgroundColor: room.id === activeChatRoomId && '#ffffff45',\n              }}\n            >\n              #{room.name}\n            </li>\n          );\n        });\n      }\n    },\n    [chatRooms, activeChatRoomId]\n  );\n\n  useEffect(() => {\n    getChatRooms();\n    addChatRoomsListeners();\n  }, []);\n\n  /**\n   * 2. Set first chatting room when first rendering\n   */\n  const [isMounted, setIsMounted] = useState(false);\n\n  const setFirstChatRoom = () => {\n    const firstChatRoom = chatRooms[0];\n    dispatch(setCurrentChatRoom(firstChatRoom));\n    setActiveChatRoomId(firstChatRoom.id);\n  };\n\n  useEffect(() => {\n    if (!isMounted && chatRooms.length > 0) {\n      setFirstChatRoom();\n      setIsMounted(true);\n    }\n  }, [chatRooms]);\n\n  return (\n    <>\n      <Flex align='center' justify='space-between' onClick={onOpen}>\n        <Flex align='center' justify='center'>\n          <FaRegSmileWink />\n          Chat rooms\n        </Flex>\n        <FaPlus />\n      </Flex>\n      <ChatRoomsList>{renderChatRooms(chatRooms)}</ChatRoomsList>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create a chat room</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <form onSubmit={handleSubmit}>\n              <FormControl mb={'10px'}>\n                <FormLabel>Name</FormLabel>\n                <Input\n                  type='text'\n                  placeholder='Enter a chat room name'\n                  onChange={(e) => {\n                    setRoomName(e.target.value);\n                  }}\n                />\n              </FormControl>\n              <FormControl mb={'10px'}>\n                <FormLabel>Description</FormLabel>\n                <Input\n                  type='text'\n                  placeholder='Enter a chat room description'\n                  onChange={(e) => {\n                    setRoomDesc(e.target.value);\n                  }}\n                />\n              </FormControl>\n            </form>\n          </ModalBody>\n          <ModalFooter>\n            <Button colorScheme='gray' mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button colorScheme='blue' onClick={handleSubmit}>\n              Create\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n\nexport default ChatRooms;\n","/Users/kkw10/my-dev/toy/react-firebase-chat-app/src/components/ChatPage/ChatPage.js",[],{"ruleId":"50","severity":1,"message":"51","line":29,"column":6,"nodeType":"52","endLine":29,"endColumn":8,"suggestions":"53"},{"ruleId":"54","severity":1,"message":"55","line":6,"column":8,"nodeType":"56","messageId":"57","endLine":6,"endColumn":15},{"ruleId":"54","severity":1,"message":"58","line":37,"column":19,"nodeType":"56","messageId":"57","endLine":37,"endColumn":29},{"ruleId":"50","severity":1,"message":"59","line":117,"column":5,"nodeType":"52","endLine":117,"endColumn":34,"suggestions":"60"},{"ruleId":"50","severity":1,"message":"61","line":123,"column":6,"nodeType":"52","endLine":123,"endColumn":8,"suggestions":"62"},{"ruleId":"50","severity":1,"message":"63","line":141,"column":6,"nodeType":"52","endLine":141,"endColumn":17,"suggestions":"64"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["65"],"no-unused-vars","'Message' is defined but never used.","Identifier","unusedVar","'setRoomRef' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'changeChatRoom'. Either include it or remove the dependency array.",["66"],"React Hook useEffect has missing dependencies: 'addChatRoomsListeners' and 'getChatRooms'. Either include them or remove the dependency array.",["67"],"React Hook useEffect has missing dependencies: 'isMounted' and 'setFirstChatRoom'. Either include them or remove the dependency array.",["68"],{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},"Update the dependencies array to be: [dispatch, history]",{"range":"77","text":"78"},"Update the dependencies array to be: [activeChatRoomId, changeChatRoom]",{"range":"79","text":"80"},"Update the dependencies array to be: [addChatRoomsListeners, getChatRooms]",{"range":"81","text":"82"},"Update the dependencies array to be: [chatRooms, isMounted, setFirstChatRoom]",{"range":"83","text":"84"},[887,889],"[dispatch, history]",[2890,2919],"[activeChatRoomId, changeChatRoom]",[3000,3002],"[addChatRoomsListeners, getChatRooms]",[3427,3438],"[chatRooms, isMounted, setFirstChatRoom]"]